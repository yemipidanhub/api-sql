// const { DataTypes } = require("sequelize");
// const { sequelize } = require("../config/db");

// module.exports = () => {
//   const FormStageA = sequelize.define(
//     "FormStageA",
//     {
//       id: {
//         type: DataTypes.UUID,
//         defaultValue: DataTypes.UUIDV4, // UUID generated by Sequelize
//         allowNull: false,
//         primaryKey: true,
//       },
//       projectId: {
//         type: DataTypes.STRING,
//         allowNull: false,
//         unique: true,
//       },
//       projectType: {
//         type: DataTypes.STRING,
//         allowNull: false,
//       },
//       agencyName: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       clientName: {
//         type: DataTypes.STRING,
//         allowNull: false,
//       },
//       clientPhone: {
//         type: DataTypes.STRING,
//         allowNull: false,
//       },
//       clientEmail: {
//         type: DataTypes.STRING,
//         allowNull: true,
//         validate: {
//           isEmail: true,
//         },
//       },
//       state: {
//         type: DataTypes.STRING,
//         allowNull: false,
//       },
//       lga: {
//         type: DataTypes.STRING,
//         allowNull: false,
//       },
//       town: {
//         type: DataTypes.STRING,
//         allowNull: false,
//       },
//       streetAddress: {
//         type: DataTypes.STRING,
//         allowNull: false,
//       },
//       latitude: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       longitude: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       consultantName: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       consultantPhone: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       consultantEmail: {
//         type: DataTypes.STRING,
//         allowNull: true,
//         validate: {
//           isEmail: true,
//         },
//       },
//       consultantLicense: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       consultantAddress: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       estimatedOverburden: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       estimatedDepth: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       estimatedFractureDepth: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       estimatedWeatheredZone: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       curveType: {
//         type: DataTypes.STRING,
//         allowNull: true,
//       },
//       accessibility: {
//         type: DataTypes.BOOLEAN,
//         allowNull: true,
//       },
//       userId: {
//         type: DataTypes.INTEGER,
//         allowNull: false,
//       },
//       status: {
//         type: DataTypes.ENUM("draft", "completed"),
//         defaultValue: "draft",
//       },
//     },
//     {
//       timestamps: true,
//       paranoid: true,
//       tableName: "form_stage_a",
//     }
//   );
//   // Set up associations
//   FormStageA.associate = (models) => {
//     FormStageA.belongsTo(models.Project, { foreignKey: "projectId" });
//     FormStageA.hasOne(models.FormStageB, {
//       foreignKey: "formStageAId",
//       as: "stageB",
//     });

//     // Add this new association for media
//     FormStageA.hasMany(models.Media, {
//       foreignKey: "formStageAId",
//       as: "media",
//       onDelete: "CASCADE",
//     });
//   };
//   return FormStageA
// };



const db = require('../config/db');

class FormStageA {
  static async create(data, userId) {
    const projectId = `PROJ-${Date.now()}`;
    const [result] = await db.execute(
      `INSERT INTO form_stage_a (
        projectId, projectType, agencyName, clientName, clientPhone, clientEmail,
        state, lga, town, streetAddress, latitude, longitude, consultantName,
        consultantPhone, consultantEmail, consultantLicense, consultantAddress,
        estimatedOverburden, estimatedDepth, estimatedFractureDepth,
        estimatedWeatheredZone, curveType, accessibility, userId
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        projectId, data.projectType, data.agencyName, data.clientName, data.clientPhone, data.clientEmail,
        data.state, data.lga, data.town, data.streetAddress, data.latitude, data.longitude, data.consultantName,
        data.consultantPhone, data.consultantEmail, data.consultantLicense, data.consultantAddress,
        data.estimatedOverburden, data.estimatedDepth, data.estimatedFractureDepth,
        data.estimatedWeatheredZone, data.curveType, data.accessibility, userId
      ]
    );
    return { ...data, id: result.insertId, projectId };
  }

  static async findById(id) {
    const [rows] = await db.execute('SELECT * FROM form_stage_a WHERE id = ?', [id]);
    return rows[0];
  }

  static async findByProjectId(projectId) {
    const [rows] = await db.execute('SELECT * FROM form_stage_a WHERE projectId = ?', [projectId]);
    return rows[0];
  }

  static async update(id, data) {
    await db.execute(
      `UPDATE form_stage_a SET 
        projectType = ?, agencyName = ?, clientName = ?, clientPhone = ?, clientEmail = ?,
        state = ?, lga = ?, town = ?, streetAddress = ?, latitude = ?, longitude = ?,
        consultantName = ?, consultantPhone = ?, consultantEmail = ?, consultantLicense = ?,
        consultantAddress = ?, estimatedOverburden = ?, estimatedDepth = ?,
        estimatedFractureDepth = ?, estimatedWeatheredZone = ?, curveType = ?,
        accessibility = ?, status = ?
      WHERE id = ?`,
      [
        data.projectType, data.agencyName, data.clientName, data.clientPhone, data.clientEmail,
        data.state, data.lga, data.town, data.streetAddress, data.latitude, data.longitude,
        data.consultantName, data.consultantPhone, data.consultantEmail, data.consultantLicense,
        data.consultantAddress, data.estimatedOverburden, data.estimatedDepth,
        data.estimatedFractureDepth, data.estimatedWeatheredZone, data.curveType,
        data.accessibility, data.status, id
      ]
    );
    return this.findById(id);
  }
}

module.exports = FormStageA;